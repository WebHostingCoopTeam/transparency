#!/usr/bin/env node

var _ = require('lodash'),
    program = require('commander'),
    csv = require('csv'),
    Import = require('../lib/import').Import;

var list = function(val) {
  return _.map(val.split(','), function(i) { return parseInt(i, 10); });
};

program
  .version('0.0.1')
  .usage('[options]')
  .option('-f, --file <file>', 'The CSV file to parse')
  .option('-a, --account <name>', 'The Ledger Account this file is for')
  .option('-i, --inverse', 'Use the negative of each amount', false)
  .option('-v, --verbose', 'Run verbosely', false)
  .option('-l, --ledger <file>', 'An existing ledger file to learn accounts from')
  .option('-c, --currency <symbol>', 'Currency symbol to use, defaults to £ ($, EUR)', '£')
  .option('--contains-header', 'The first row of the CSV is a header and should be skipped')
  .option('--csv-separator <separator>', 'Separator for parsing the CSV, default is comma.', ',')
  .option('--date-column <number>', 'Column containing the date in the CSV file, the first column is column 1', parseInt)
  .option('--date-format <string>', 'Force the date format')
  .option('--payee-column <number>', 'Column containing the payee (description) in the CSV file', parseInt)
  .option('--amount-column <number>', 'Column containing the amount in the CSV file', parseInt)
  .option('--amount-columns <numbers>', 'Multiple columns containing the amount in the CSV file', list)
  .parse(process.argv);

var file = program.file,
    delimiter = program.csvSeparator,
    escape = '"';

var options = {
  ledger: program.ledger,
  log: program.verbose,
  header: program.containsHeader,
  currency: program.currency,
  account: program.account,
  date: {
    column: program.dateColumn,
    format: program.dateFormat
  },
  payee: {
    column: program.payeeColumn
  }
};

if (program.amountColumn) {
  options.amount = {
    column: program.amountColumn,
    inverse: program.inverse
  };
} else if (program.amountColumns) {
  options.amount = {
    columns: program.amountColumns,
    inverse: program.inverse
  };
}

if (!file) {
  program.help();
}

var csv = csv().from.path(file, { delimiter: delimiter, escape: escape });

new Import(options)
  .on('skipped', function() {
    process.stdout.write('.');
  })
  .once('error', function(err) {
    console.error(err);
    process.exit(1);
  })
  .once('end', function() {
    console.log('completed!');
    process.exit(0);
  })
  .run(csv);